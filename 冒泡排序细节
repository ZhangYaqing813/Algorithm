package main

import "fmt"

func main() {
	var arrv[10] int = [...] int {10, 9, 12, 6, 8, 1, 90, 18, 20, 28}
	var lenth = len(arrv) - 1
	for i := 0; i <lenth ; i++{
		for j :=lenth; j>i; j--{
			if arrv[j] < arrv[j-1]{
				tmp := arrv[j]
				arrv[j] = arrv[j-1]
				arrv[j-1] = tmp
			}
		}
	}
	fmt.Println(arrv)
}


理解：
	冒泡算法的核心思想是，相邻的两个元素进行比较（从小到大），如果前一个元素大于后一个元素，
	则两个进行交换，

	{10, 9, 12, 6, 8, 1, 90, 18, 20, 28}

	第一次：

	# 一共需要比较多少次，再这个示例中，  lenth = len(arrv) - 1 ，lenth = 9(从0 到 9 共10次)
	for i := 0; i <lenth ; i++{ 
		# j = 9, i =0, 只要j > i(0), 就会一直循环
		for j :=lenth; j>i; j--{
			#数组间的比较 arrv[j] 是否小于 arrv[j-1]，如果小于怎进行数值交换，否则继续循环。

			if arrv[j] < arrv[j-1]{
				#arrv[9] = 28， arrv[8] = 20

				tmp := arrv[j]
				arrv[j] = arrv[j-1]
				arrv[j-1] = tmp
			}
		}

		比较过程： 当 i= 0 时

			第一次比较：

			j = 9, j-1 =8
			arrv[9] = 28, arrv[8] = 20
			28 不小于 20 ，则不进行交换
			{10, 9, 12, 6, 8, 1, 90, 18, 20, 28}

			第二比较：

			j = 8, j-1 = 7
			arrv[8] = 20, arrv[7] = 18
			20 不小于 18 ，则不进行交换
			{10, 9, 12, 6, 8, 1, 90, 18, 20, 28}

			第三次比较：

			j = 7, j-1 = 6
			arrv[7] = 18 , arrv[6] = 90
			18 小于 90 则尽心交换
				tmp := 18
				arrv[7] = 90
				arrv[6] = 18
			{10, 9, 12, 6, 8, 1, 18, 90, 20, 28}

			第四次比较：

			j = 6, j-1 = 5
			arrv[6] = 18, arrv[5] = 1
			arrv[6] 在交换前是 90，交换后是18
			18 不小于 1 ，则不进行交换
			{10, 9, 12, 6, 8, 1, 18, 90, 20, 28}

			第五次比较：

			j = 5, j-1 =4
			arrv[5] = 1, arrv[4] = 8
			1 小于8 ，进行交换
				tmp := arrv[5] = 1
				arrv[5] = arrv[4] =8
				arrv[4] = tmp = 1
			{10, 9, 12, 6, 1, 8, 18, 90, 20, 28}


			第六次比较：

			j = 4, j-1 = 3
			arrv[4] = 1, arrv[3] = 6
			1 小于 6 进行交换
				tmp := arrv[4] = 1
				arrv[4] = arrv[3] = 6
				arrv[3] = tmp = 1
			{10, 9, 12, 1， 6, 8, 18, 90, 20, 28}

			第七次比较：

			j = 3, j-1 = 2
			arrv[3] = 1, arrv[2] = 12
			1 小于 6 进行交换
				tmp := arrv[3] = 1
				arrv[3] = arrv[3] = 12
				arrv[2] = tmp = 1
			{10, 9, 1， 12， 6, 8, 18, 90, 20, 28}


			第八次比较：

			j = 2, j-1 = 1
			arrv[2] = 1, arrv[1] = 9
			1 小于 6 进行交换
				tmp := arrv[2] = 1
				arrv[2] = arrv[1] = 9
				arrv[1] = tmp = 1
			{10, 1， 9， 12， 6, 8, 18, 90, 20, 28}


			第九次比较：

			j = 1, j-1 = 0
			arrv[1] = 1, arrv[0] = 10
			1 小于 6 进行交换
				tmp := arrv[1] = 1
				arrv[1] = arrv[0] = 10
				arrv[0] = tmp = 1
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

		当 i= 2 时：
			当i = 0 时，我们进行了9次比较，但是有10个数字，其实很好解释
			因为我们每次都是进行两个数的比较，所以10个数字只需要九次就完全
			可以了，当i = 2 时我们只需要进行8次比较，以此类推，

			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

			第一次比较：

			j = 9, j-1 =8
			arrv[9] = 28, arrv[8] = 20
			28 不小于 20 ，则不进行交换
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

			第二比较：

			j = 8, j-1 = 7
			arrv[8] = 20, arrv[7] = 18
			20 不小于 18 ，则不进行交换
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

			第三次比较：

			j = 7, j-1 = 6
			arrv[7] = 90 , arrv[6] = 18
			90 不小于 18 则不交换
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}
			
			第四次比较：

			j = 6, j-1 = 5
			arrv[6] = 18, arrv[5] = 8
			18 不小于 8 不交换
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

			第五次比较：

			j = 5, j-1 = 4
			arrv[5] = 8, arrv[4] = 6
			8 不小于 6 则不交换
			{1， 10， 9， 12， 6, 8, 18, 90, 20, 28}

			第六次比较：
			j = 4 , j-1 = 3 
			arrv[4] = 6,arrv[3]= 12
			6 小于 12 进行交换
			tmp = arrv[4] = 6
			arrv[4] = arrv[3] = 12
			arrv[3] = 6
			{1， 10， 9, 6, 12, 8, 18, 90, 20, 28}

			第七次比较：
			j = 3, j-1 = 2
			arrv[3] = 6, arrv[2] = 9
			6 小于 9 进行交换
			tmp = arrv[3] = 6
			arrv[3] = arrv[2] = 9
			arrv[2] = tmp = 6
			{1， 10， 6， 9, 12, 8, 18, 90, 20, 28}

			第八次比较：
			j = 2, j-1 = 1
			arrv[2] = 6, arrv[1] = 10
			6 小于 10 进行交换
			tmp = arrv[2] = 6
			arrv[2] = arrv[1] = 10
			arrv[2] = tmp = 6
			{1， 6， 10， 9, 12, 8, 18, 90, 20, 28}

		此时 for j := lenth, j> i ; j-- 中的 j > i 条件已不成立，退出本次循环，
		for i :=0; i< lenth; i ++ 中的i会 +1， i=2

		当 i = 2 时的比较
			
